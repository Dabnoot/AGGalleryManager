<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/topLevelLayout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".Activity_Browser"
    android:background="@android:color/background_dark">

    <!-- View that will be hidden when video goes fullscreen -->
    <RelativeLayout
        android:id="@+id/nonVideoLayout"
        android:layout_width="match_parent"
        android:layout_height="match_parent" >

        <RelativeLayout
            android:id="@+id/relativeLayout_BrowserTopBar"
            android:layout_width="match_parent"
            android:layout_height="34dp"
            android:layout_alignParentTop="true">

            <!--Gravity bottom in the LinearLayouts below create the effect. Remove them for an
                  interesting change. -->

            <LinearLayout
                android:layout_width="0dp"
                android:layout_height="match_parent"
                android:layout_alignParentStart="true"
                android:gravity="bottom"
                android:layout_toStartOf="@id/linearLayout_BrowserTopBarButtons">

                <com.google.android.material.tabs.TabLayout
                    android:id="@+id/tabLayout_WebTabs"
                    android:layout_width="match_parent"
                    android:layout_height="34dp"
                    app:tabGravity="start"
                    app:tabMode="scrollable"
                    app:tabIndicatorColor="#00FFFFFF"
                    app:tabMaxWidth="200dp"
                    app:tabPaddingStart="0dp"
                    app:tabPaddingEnd="0dp"
                    android:background="@color/colorStatusBar">

                    <com.google.android.material.tabs.TabItem
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"/>

                </com.google.android.material.tabs.TabLayout>

            </LinearLayout>

            <LinearLayout
                android:id="@+id/linearLayout_BrowserTopBarButtons"
                android:layout_width="wrap_content"
                android:layout_height="match_parent"
                android:gravity="bottom"
                android:layout_alignParentEnd="true"
                android:background="@color/colorStatusBar">

                <!--<Button
                    android:id="@+id/button_testBrowser"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_toStartOf="@id/imageButton_AddTab"
                    android:text="test"
                    />-->

                <ImageButton
                    android:id="@+id/imageButton_AddTab"
                    android:layout_width="34dp"
                    android:layout_height="36dp"
                    app:srcCompat="@drawable/add_action"
                    android:backgroundTint="@color/colorStatusBar"
                    android:contentDescription="Add tab" />

            </LinearLayout>

        </RelativeLayout>

        <androidx.viewpager2.widget.ViewPager2
            android:id="@+id/viewPager2_WebPages"
            android:layout_width="match_parent"
            android:layout_height="0dp"
            android:layout_below="@id/relativeLayout_BrowserTopBar"
            android:layout_alignParentStart="true"
            android:layout_alignParentBottom="true">


        </androidx.viewpager2.widget.ViewPager2>

    </RelativeLayout>


    <!-- View where the video will be shown when video goes fullscreen -->
    <RelativeLayout
        android:id="@+id/videoLayout"
        android:layout_width="match_parent"
        android:layout_height="match_parent" >

        <!-- View that will be shown while the fullscreen video loads. For example you could include
        a "Loading..." message. However, in this particular example this view is actually defined in
        view_loading_video.xml and inflated programmatically in ExampleActivity.java. The reason for
        this is to keep the main layout (this file) cleaner. -->
        <!-- <View
            android:id="@+id/videoLoading"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_centerInParent="true"
            android:visibility="invisible" /> -->

    </RelativeLayout>


</RelativeLayout>